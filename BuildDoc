# Variables for testing.
SRC="src"
ROOT="@ROOT_USER"
PORT="@PORT"
MAIN="$SRC/main.py"
OS="?{uname -s | tr A-Z a-z}"
OS_STATEMENT="I use ?{uname -s | tr A-Z a-z} because $OS is cool!"

# Variables for compilation and packaging.
FLAGS="-B"
EXPORT="export.py"

[test]
echo "$PORT $ROOT"
echo @PERSON1
&printf "$MAIN\n\n"
&printf "@DEC\n"
&echo @ROOT_USER

# &printf "Compiling...\n\n"
# &python3 $FLAGS $EXPORT


[cond]
if (@PORT == 66)
&echo "math is mathing"
endif

[ace]
# ~< = Eval Fang; a way to call `eval()`.
# ~^ = Exec Fang; a way to call `exec()`, and can let you mess with the interpreter just a little bit ;)
# Yes these both lead to ACE, however you have to go out of your way to do it, in your own build file,
# and on a large scale project, something so malicious would stick out like a sore thumb.
# plus thanks to my garbage code, it's a bit of a pain in the ass to structure something in a way the
# interpreter won't interfere with. So from my testing, any usage of [] is out of the question.
~< __import__("os").system("echo ACE POG")
~^ v,l=self.VM.reg.get('SRC'); v.value='sRc'; print(v.value)

# if ($PORT == 69)
# &echo "heh"
# &echo "nice."
#
# &printf "69\n"
# endif

# if ($OS != "darwin")
# &printf "you suck\n"
# else
# &printf "man of culture, i see\n"
# endif

# if ($SRC == "source")
# &echo "why are you like this?"
# elif ($SRC == "src")
# &echo "good, all is as it should be."
# else
# &echo "you're a monster."


[compile]
# Gotta fix single `\` being an issue, just gotta add another one if one is read by this point in the script.
# ☝️ Fixed :D (remove both comments next commit)
&printf "Compiling...\n\n"
&python3 $FLAGS $EXPORT

[package]
&printf "Packaging...\n\n"
&python3 $FLAGS $EXPORT --zip
