from interpreter.ast import AST
from interpreter.flags import Flags
from interpreter.tokens import Token


class Parser:
    def __init__(self, _flags: Flags) -> None: self.FLAGS = _flags

    def parse_tokens(self, _tokens: list[tuple[Token, str | int | None]]) -> AST:
        TREE = AST()
        ignore = False

        # if "debug" in self.FLAGS.as_list: print(_tokens)

        for i, t in enumerate(_tokens):
            token, value = t

            if token is Token.NEWLINE:
                if ignore: ignore = False

            if ignore: continue

            print(token)
            match token:
                case Token.LETTER: ...
                case Token.NUMBER: ...

                # Brackets #
                case Token.L_PAREN: ...
                case Token.R_PAREN: ...
                case Token.L_BRACE: ...
                case Token.R_BRACE: ...
                case Token.L_BRACKET: ...
                case Token.R_BRACKET: ...
                case Token.L_ANGLE_BRACKET: ...
                case Token.R_ANGLE_BRACKET: ...

                # Operators #
                case Token.DOLLAR: ...
                case Token.AT: ...
                case Token.QUESTION_MARK: ...
                case Token.AMPERSAND: ...
                case Token.PERCENT: ...
                case Token.EQUAL: ...

                # Symbols #
                case Token.HASH: ignore = True

                case Token.D_QUOTE: ...
                case Token.S_QUOTE: ...
                case Token.BACKTICK: ...
                case Token.PERIOD: ...
                case Token.COMMA: ...
                case Token.HYPHEN: ...
                case Token.UNDERSCORE: ...
                case Token.PIPELINE: ...
                case Token.EXCLAMATION: ...
                case Token.COLON: ...
                case Token.SEMICOLON: ...
                case Token.CAROT: ...
                case Token.ASTERISK: ...
                case Token.TILDE: ...
                case Token.FORWARD_SLASH: ...
                case Token.BACKWARD_SLASH: ...

                # Other #
                case Token.WHITESPACE: ...
                case Token.TAB: ...

                case Token.NEWLINE:
                    if ignore: ignore = False

                case Token.BROKEN_STR: ...
                case Token.UNKNOWN: ...
                case Token.EOF: ...

        return TREE
